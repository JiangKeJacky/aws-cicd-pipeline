pipeline {
	agent any

   	options {
        	buildDiscarder(logRotator(numToKeepStr: '5',daysToKeepStr:'16'))
        	timeout(time: 30, unit: 'MINUTES')
    	}

    // parameters {

    //     string(name: 'GIT_REPO', defaultValue: 'https://test.com/scm/myproject.git', description: '')
    //     choice(choices: ['YES','NO'], description: 'default to YES', name: 'DeployFlag')
    //     choice(choices: ['cn-east-1','cn-west-2'], description: '', name: 'REGION')
    //     choice(choices: ['111011193316', '2222215333393'], description: '', name: 'USER_ID')

    //     choice(choices: ['dev', 'qa', 'prd'], description: '', name: 'RUN_ENV')


    // }

    environment {
        PROJECT_NAME            = "myproject"
        JENKIN_ROLE_NAME        = 'role-Deploy'
        ROOT_BACKEND_PATH       = "${WORKSPACE}"

        RUN_ENV                 = "prd"
        VERSION_NUMBER          = "0.0.${BUILD_NUMBER}.${RUN_ENV}"
        MVN_PACKAGE_NAME        = "target/${application_dir}-0.0.1-SNAPSHOT.zip"
        APPLICATION_DIR         = "${PROJECT_NAME}"

        //GIT repository
        GIT_REPOSITORY          = "http://root:abcd1234@ec2-54-251-170-35.ap-southeast-1.compute.amazonaws.com/root/cicd-demo.git"

        //AWS access key
        AWS_DEFAULT_REGION      = "ap-southeast-1"
        AWS_ACCESS_KEY_ID       = "ASIASYL4OVBJ66GDMOFM"
        AWS_SECRET_ACCESS_KEY   = "VnG2riT1i7qY2lTKRsbna6nlMV3kNsyq1+CVUo+d"
        AWS_SESSION_TOKEN       = "IQoJb3JpZ2luX2VjEOL//////////wEaCXVzLWVhc3QtMSJIMEYCIQD8vohR4g6bPRNQ8FicaTVdWRuSjQ6gV8lv4zzgc+jIGwIhALfdlEdrSAIE1K4aot0wv6tzkvAbEGhZ7v5gplGV3OvlKqACCJv//////////wEQABoMMTg5Nzc2NDM5Mzc5IgxNMsZbssNEiS75RYYq9AG3EcanPPQPdRYmfIP1j7Abnw/EEKbjkJmmyUjMMS9oGlAQ++s7v1t4dRubtZRHz1xhEzrd2VxJUD6yvJ8FUsh91MG88Mebxhr5skIVzEoZ5g9uWiD6FdiJrECGUHgsG6z1P+qnVB9zbYm4JYmBUeg/AY6Qn8swQUI9VWuTf9/lOo4P5a5FwwSw1QQuvJMGIpI9haVB2uiQeLhknSBT4eSPpmwhNn6vOlxnQTG6RT/Wrs6oOfj0eQX0yxUJQE1nybMebv0dgD0H/c+yBwYHp+EVKuBBM0Mf8PkU1NFndvplevHrsCpU1V2CiVaTbqSys7N2ROh5MLPThYYGOpwBaZs1nygDSx438oTXL7XyaUNqDrTutBMu2FoYiysVlue3IZJnYeh6o14+NF94mfDFbCTcYuxkYyNgpWdnneTJTBGe1/Uge2GcJY1g2ZaEowb4q6IxmagX7fF7TdtdGMQfgU/YXOG3lu/cD/FcKnvQIKcufAVdsWiPR3ZTk8btSdsynh0/flrndvFy94g0vYRVvxou4AFcxJeJfY7X"

        //s3 bucket for store the code package, should be created before the pipeline first run
        AWS_S3_BUCKET_CODE_PACKAGE      = "s3-code-package"

        //initialize codedeploy for a pipeline,  should be created before the pipeline first run
        AWS_DEPLOYMENT_APPLICATION_NAME = "SpringBoot_Test"
        AWS_DEPLOYMENT_GROUP            = "SpringBoot_DepGroup"
    }

    stages {

        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git "${GIT_REPOSITORY}"

                // Run Maven on a Unix agent.
                //sh "mvn -Dmaven.test.failure.ignore=true clean package"

                // //代码编译
                // sh "mvn clean compile"

                // //单元测试
                // sh "mvn -Dtest=com.mgiglione.service.test.unit.UnitTests test"

                // //集成测试
                // sh "mvn -Dtest=com.mgiglione.service.test.integration.IntegrationTests test"

                // //代码编译
                // sh "mvn package"

                // To run Maven on a Windows agent, use
                // bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }

            // post {
            //     // If Maven was able to run the tests, even if some of the test
            //     // failed, record the test results and archive the jar file.
            //     success {
            //         //junit '**/target/surefire-reports/TEST-*.xml'
            //         //archiveArtifacts 'target/*.jar'
            //     }
            // }
        }

        stage('PackageToS3' ) {
	    //是否部署判断，参数化
	    // when {
        //         environment ignoreCase: true, name: 'DeployFlag', value: 'YES'
        //         beforeAgent true
        //     }
            steps{
                // echo "aws"
                // sh "aws s3 ls"
                // sh "aws s3 cp ${application_dirs}/${mvn_package_name} s3://devops-template-build-packages/${application_dirs}_${VERSION_NUMBER}.zip"
                // echo "VERSION_NUMBER:  ${VERSION_NUMBER}"

                //read configuration from properties
                configFileProvider([configFile(fileId: 'd2db6af6-4c8d-49a9-bd4d-2dd168eae2b3', variable: 'configfile')]){
                    script{
                    echo "file: $configfile "
                    def props = readProperties file: "$configfile"
                    def username = props['username']
                    echo "username: $username "
                    }
                }

                    script{

                        // def UPLOAD_SCRIPT = '''
                        //     cd myproject
                        //     mvn package -U -Dmaven.test.skip=true -am
                        //     cd ../
                        //     source terraform_scripts/role.sh ${USER_ID} ${JENKIN_ROLE_NAME}
                        //     aws s3 cp ${application_dirs}/${mvn_package_name} s3://${bucket}/code-package/${application_dirs}_${VERSION_NUMBER}.zip
                        //     '''

                        def UPLOAD_SCRIPT = '''
                        aws s3 ls
                        aws s3 cp ${APPLICATION_DIR}/${MVN_PACKAGE_NAME} s3://${AWS_S3_BUCKET_CODE_PACKAGE}/code-package/${APPLICATION_DIR}_${VERSION_NUMBER}.zip
                        '''
                        sh UPLOAD_SCRIPT
                        echo "VERSION_NUMBER:  ${VERSION_NUMBER}"
                    }
            }
        }

	    stage('Deploy') {
            steps{
                    script{
                        def DEPLOY_SCRIPT = '''
                                   aws --region ${AWS_DEFAULT_REGION} deploy create-deployment \
                                   --application-name ${AWS_DEPLOYMENT_APPLICATION_NAME} \
                                   --deployment-group-name ${AWS_DEPLOYMENT_GROUP} \
                                   --deployment-config-name CodeDeployDefault.OneAtATime \
                                   --s3-location bucket=${AWS_S3_BUCKET_CODE_PACKAGE},key=code-package/${APPLICATION_DIR}_${VERSION_NUMBER}.zip,bundleType=zip
                                   '''
                    sh DEPLOY_SCRIPT
                    }
            }
        }
    }
}